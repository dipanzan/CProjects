package energy.agent;import energy.annotation.Energy;import java.lang.instrument.Instrumentation;import java.lang.reflect.Method;import java.util.Arrays;import java.util.List;import java.util.Optional;public class EnergyAgent {    private static final String TARGET_CLASS = "energy.Lock";    private static Instrumentation instrumentation;    public static void main(String[] args) {        System.out.println("hello");    }    public static void agentmain(String agentArgs, Instrumentation inst) {        instrumentation = inst;        Class<?> targetClass = findTargetClass();        List<Method> methods = findMethodsAnnotatedWithEnergyAnnotation(targetClass);        methods.forEach(System.out::println);    }    private static Class<?> findTargetClass() {        return findTargetClassFromName()                .or(EnergyAgent::findTargetClassFromLoadedClasses)                .orElseThrow();    }    private static Optional<Class<?>> findTargetClassFromName() {        try {            return Optional.of(Class.forName(TARGET_CLASS));        } catch (ClassNotFoundException cnfe) {            throw new RuntimeException(cnfe);        }    }    private static Optional<Class<?>> findTargetClassFromLoadedClasses() {        Class<?> clazz = Arrays.stream(instrumentation.getAllLoadedClasses())                .filter(EnergyAgent::findTargetClassFromName)                .findFirst()                .orElseThrow();        return Optional.of(clazz);    }    private static boolean findTargetClassFromName(Class<?> klazz) {        return klazz.getName().equals(TARGET_CLASS);    }    private static List<Method> findMethodsAnnotatedWithEnergyAnnotation(Class<?> clazz) {        return Arrays.stream(clazz.getMethods())                .filter(EnergyAgent::isEnergyAnnotationPresent)                .toList();    }    static boolean isEnergyAnnotationPresent(Method method) {        return method.isAnnotationPresent(Energy.class);    }}